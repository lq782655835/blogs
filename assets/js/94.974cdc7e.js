(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{599:function(e,t,l){"use strict";l.r(t);var a=l(9),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"puppeteer翻页爬虫"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#puppeteer翻页爬虫"}},[e._v("#")]),e._v(" Puppeteer翻页爬虫")]),e._v(" "),l("blockquote",[l("p",[e._v("Puppeteer(中文翻译”木偶”) 是 Google Chrome 团队官方的无界面Chrome 工具。")])]),e._v(" "),l("p",[l("a",{attrs:{href:"https://github.com/lq782655835/crawler/blob/master/pagination-crawler.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("pagination-crawler"),l("OutboundLink")],1),e._v(" 是一个使用puppeteer操控搜狗输入法页面翻页，爬取每个页面数据的小爬虫。")]),e._v(" "),l("h2",{attrs:{id:"常用api"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#常用api"}},[e._v("#")]),e._v(" 常用API")]),e._v(" "),l("p",[e._v("page.$ 和page.$$区别：page.$ 等于同于document.querySelector，page.$$ 等同于  document.querySelectorAll。同理page.$eval和page.$$eval区别")]),e._v(" "),l("p",[e._v("page.$ 和page.$eval区别：page.$返回elementHandle，这是puppteer包装的对象（非dom对象），而page.$eval第二个参数是根据第一个参数选择拿到的DOM对象。相对来说，page.$eval有更大的dom操作能力")]),e._v(" "),l("ul",[l("li",[l("p",[e._v("开始")]),e._v(" "),l("ul",[l("li",[e._v("browers = await puppeteer.launch({headless:bool})")]),e._v(" "),l("li",[e._v("page = await browers.newPage()")]),e._v(" "),l("li",[e._v("page.goto(url)")]),e._v(" "),l("li",[e._v("browers.close()")])])]),e._v(" "),l("li",[l("p",[e._v("page")]),e._v(" "),l("ul",[l("li",[e._v("page.waitFor(2000 or '.selector') 等待时间或某个元素出现")]),e._v(" "),l("li",[e._v("page.waitForSelector('.selector').then(() => todo) 等待元素出现后执行todo")]),e._v(" "),l("li",[e._v("page.click('.selector')")])])]),e._v(" "),l("li",[l("p",[e._v("获取/操作页面元素")]),e._v(" "),l("ul",[l("li",[e._v("获得被包装的elementHandle值\n"),l("ul",[l("li",[e._v("page.$('.el') 被包装成elementHandle的document.querySelector值")]),e._v(" "),l("li",[e._v("page.$('.el') 被包装成elementHandle的document.querySelectorAll值")])])]),e._v(" "),l("li",[e._v("选择，第二个参数为dom\n"),l("ul",[l("li",[e._v("page.$eval('.el', dom => dom) 获取document.querySelector值后，在浏览器环境处理")]),e._v(" "),l("li",[e._v("await page.$$eval('.el', doms => doms) 获取document.querySelectorAll值后，在浏览器环境处理")])])]),e._v(" "),l("li",[e._v("执行脚本  类似于在控制台中执行指令\n"),l("ul",[l("li",[e._v("await page.evaluate(body => body.innerHTML, await page.$('body')); 浏览器环境下执行的代码")])])])])]),e._v(" "),l("li",[l("p",[e._v("拦截请求")]),e._v(" "),l("ul",[l("li",[e._v("page.setRequestInterception(true) 开启拦截请求")]),e._v(" "),l("li",[e._v("page.on('request',interceptedRequest => interceptedRequest.abort()) 拦截逻辑")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);