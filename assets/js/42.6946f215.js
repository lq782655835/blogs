(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{546:function(_,t,v){"use strict";v.r(t);var e=v(9),s=Object(e.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"http"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[_._v("#")]),_._v(" HTTP")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://lq782655835.github.io/blogs/js/http-base-1.url.html#%E4%BC%98%E5%8C%96",target:"_blank",rel:"noopener noreferrer"}},[_._v("输入URL背后的技术步骤"),v("OutboundLink")],1),_._v("(http请求链路、渲染引擎渲染等)")])]),_._v(" "),v("h2",{attrs:{id:"_1-http三次握手-四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-http三次握手-四次挥手"}},[_._v("#")]),_._v(" 1. http三次握手，四次挥手")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://lq782655835.github.io/blogs/js/http2.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("Http/2与Http/1.x比较"),v("OutboundLink")],1)]),_._v(" "),v("p",[_._v("TCP三次握手")]),_._v(" "),v("p",[_._v("三次握手的必要性：为了保证服务器能接收到客户端的信息并做出正确的应答而进行前两次（第一次和第二次）握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次（第二次和第三次）握手。")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("第一次握手")]),_._v("：建立连接时，客户端"),v("code",[_._v("发送syn包")]),_._v("（syn=j）到服务器，并"),v("code",[_._v("进入SYN_SENT状态")]),_._v("，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。")]),_._v(" "),v("li",[v("code",[_._v("第二次握手")]),_._v("：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即"),v("code",[_._v("SYN+ACK包")]),_._v("，此时服务器进入"),v("code",[_._v("SYN_RECV状态")]),_._v("；")]),_._v(" "),v("li",[v("code",[_._v("第三次握手")]),_._v("：客户端收到服务器的"),v("code",[_._v("SYN+ACK包")]),_._v("，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入"),v("code",[_._v("ESTABLISHED（TCP连接成功）状态")]),_._v("，完成三次握手。\n完成三次握手，客户端与服务器开始传送数据。这样就保证了，每次传送数据都会准确到达目标设备了。")])]),_._v(" "),v("p",[_._v("TCP四次挥手")]),_._v(" "),v("ol",[v("li",[_._v("客户端A发送一个"),v("code",[_._v("FIN")]),_._v("，用来关闭客户A到服务器B的数据传送。")]),_._v(" "),v("li",[_._v("服务器B收到这个FIN，它"),v("code",[_._v("发回一个ACK")]),_._v("，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。")]),_._v(" "),v("li",[_._v("服务器B关闭与客户端A的连接，发送一个"),v("code",[_._v("FIN给客户端A")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("客户端A发回ACK")]),_._v("报文确认，并将确认序号设置为收到序号加1。")])]),_._v(" "),v("h2",{attrs:{id:"_2-https握手过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-https握手过程"}},[_._v("#")]),_._v(" 2. https握手过程")]),_._v(" "),v("ol",[v("li",[_._v("客户端使用https的url访问web服务器,要求与服务器建立ssl连接")]),_._v(" "),v("li",[_._v("web服务器收到客户端请求后, 会将网站的证书(包含公钥)传送一份给客户端")]),_._v(" "),v("li",[_._v("客户端收到网站证书后会检查证书的颁发机构以及过期时间, 如果没有问题就随机产生一个秘钥")]),_._v(" "),v("li",[_._v("客户端利用公钥将会话秘钥加密, 并传送给服务端, 服务端利用自己的私钥解密出会话秘钥")]),_._v(" "),v("li",[_._v("之后服务器与客户端使用秘钥加密传输")])]),_._v(" "),v("h2",{attrs:{id:"_3-状态码-缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-状态码-缓存"}},[_._v("#")]),_._v(" 3. 状态码/缓存")]),_._v(" "),v("h3",{attrs:{id:"状态码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[_._v("#")]),_._v(" 状态码")]),_._v(" "),v("ul",[v("li",[_._v("202: 服务器已接受请求，但尚未处理。")]),_._v(" "),v("li",[_._v("204: 服务器成功处理了请求，没有返回任何内容。")]),_._v(" "),v("li",[_._v("302: 普通重定向")]),_._v(" "),v("li",[_._v("304: 对比缓存。Last-Modified/If-Modified-Since")])]),_._v(" "),v("h3",{attrs:{id:"缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[_._v("#")]),_._v(" 缓存")]),_._v(" "),v("p",[v("strong",[_._v("Cache-Control、Expires、Etag 和 Last-Modified 来设置 HTTP 缓存。")])]),_._v(" "),v("p",[v("code",[_._v("强缓存：让客户端决定是否向服务器发送请求")]),_._v("（在chrome下表现为200 from cache）")]),_._v(" "),v("ul",[v("li",[_._v("http1.0\n"),v("ul",[v("li",[_._v("Expires"),v("sup",[v("code",[_._v("通用")])]),_._v("。启用缓存和定义缓存时间。时间是相对服务器")]),_._v(" "),v("li",[_._v("Pragma"),v("sup",[v("code",[_._v("通用")])]),_._v("。禁用缓存，字段值为no-cache的时候")])])]),_._v(" "),v("li",[_._v("http1.1\n"),v("ul",[v("li",[_._v("Cache-Control"),v("sup",[v("code",[_._v("通用")])]),_._v("。启用缓存/禁用缓存/定义时间（max-age相对时间）")])])])]),_._v(" "),v("p",[_._v("优先级从高到低分别是 Pragma -> Cache-Control -> Expires 。")]),_._v(" "),v("p",[v("code",[_._v("对比缓存")]),_._v("：让客户端与服务器之间能实现缓存文件是否更新的验证。")]),_._v(" "),v("ul",[v("li",[_._v("Last-Modified"),v("sup",[v("code",[_._v("响应")])]),_._v("。响应时，告诉浏览器资源的最后修改时间。")]),_._v(" "),v("li",[_._v("If-Modified-Since"),v("sup",[v("code",[_._v("请求")])]),_._v("。再次请求时，发送Last-Modified值。服务器拿到对比文件修改时间，没修改304，有修改200。")])]),_._v(" "),v("p",[v("code",[_._v("协商缓存")]),_._v("：因为存在文件修改，但内容没改，所以另外一种方式通过ETag数据比对（优先级高于Last-Modified / If-Modified-Since）")]),_._v(" "),v("ul",[v("li",[_._v("ETag"),v("sup",[v("code",[_._v("响应")])]),_._v("。")]),_._v(" "),v("li",[_._v("If-None-Match"),v("sup",[v("code",[_._v("请求")])]),_._v("。")])]),_._v(" "),v("blockquote",[v("p",[_._v("通用首部字段，这意味着它能分别在请求报文和响应报文中使用")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://images2015.cnblogs.com/blog/632130/201702/632130-20170210141453338-1263276228.png",alt:""}})]),_._v(" "),v("h2",{attrs:{id:"_4-安全"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-安全"}},[_._v("#")]),_._v(" 4. 安全")]),_._v(" "),v("ol",[v("li",[v("p",[v("code",[_._v("XSS")]),_._v("："),v("code",[_._v("跨站脚本攻击")]),_._v("，是属于代码注入的一种。攻击者通过将代码注入网页中，其他用户看到会受到影响(代码内容有请求外部服务器);")]),_._v(" "),v("p",[_._v("比如：评论区书写评论时，故意写入<script>alert(document.cookie)</scirpt>,如果服务端没校验直接存库了，同时返给前端使用v-html时（所以尽量修改节点文本），所有看该条评论的用户cookie都被暴露了。")]),_._v(" "),v("p",[_._v("防范：")]),_._v(" "),v("ul",[v("li",[_._v("转义 < > 这些特殊字符为实体字符(比如：评论区内容没转译直接存数据库，显示时可能js就能拿到敏感信息了，属于存储型XSS)")]),_._v(" "),v("li",[_._v("利用正则判断攻击脚本")]),_._v(" "),v("li",[_._v("尽量修改节点文本而不是修改节点内容html(比如：有可能dom为<script>标签，这样就可以通过js拿到cookie等敏感信息)")])])]),_._v(" "),v("li",[v("p",[v("code",[_._v("CSRF")]),_._v("（Cross-site request forgery）：一种"),v("code",[_._v("跨站请求伪造")]),_._v('，冒充用户发起请求，完成一些违背用户请求的行为。比如，你开发的网站中，有一个购买商品的操作，使用get接口。那么黑客网站就可以通过<image src="开发网站地址"，去调用你的开发网站（比如刷票）。\n防范：')]),_._v(" "),v("ul",[v("li",[_._v("尽量对要修改数据的请求使用post而不是get")]),_._v(" "),v("li",[_._v("给每一次用户登陆分配一个临时token，用服务端的setCookie头将此token种入用户cookie中，每次请求比对用户方token与服务器端token是否吻合。(有可能token被中间人盗取，此时根据解决方案是使用https服务。)")]),_._v(" "),v("li",[_._v("服务器禁止跨域请求")]),_._v(" "),v("li",[_._v("及时清除用户的无效cookie")])])]),_._v(" "),v("li",[v("p",[_._v("网络劫持攻击。防范：https加密")])]),_._v(" "),v("li",[v("p",[v("RouterLink",{attrs:{to:"/temp/cookie-google-rule.html"}},[_._v("cookie")]),_._v("(附google最新策略)")],1)])]),_._v(" "),v("h2",{attrs:{id:"_5-session实现原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-session实现原理"}},[_._v("#")]),_._v(" 5. session实现原理")]),_._v(" "),v("p",[_._v("1、创建Session的时候，服务器将生成一个唯一的sessionid然后用它生成一个关闭浏览器就会失效的cookie。")]),_._v(" "),v("p",[_._v("2、然后再将一个与这个sessionid关联的数据项加入散列表。")]),_._v(" "),v("p",[_._v("3、当浏览器端提交到服务器时，会通过sessionid=123去散列表中寻找属于该用户的Session信息。")]),_._v(" "),v("h2",{attrs:{id:"_6-js跨域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-js跨域"}},[_._v("#")]),_._v(" 6. js跨域")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://lq782655835.github.io/blogs/js/http-cross-domain.html#jsonp",target:"_blank",rel:"noopener noreferrer"}},[_._v("HTTP跨域解决方案"),v("OutboundLink")],1)]),_._v(" "),v("ol",[v("li",[_._v("JSONP")]),_._v(" "),v("li",[_._v("CORS")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/948614-1752f5c8993cc1a0.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600/format/webp",alt:""}})])])}),[],!1,null,null,null);t.default=s.exports}}]);