(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{749:function(t,s,a){"use strict";a.r(s);var e=a(9),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"shell-vim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-vim"}},[t._v("#")]),t._v(" Shell && Vim")]),t._v(" "),a("h2",{attrs:{id:"目录操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录操作"}},[t._v("#")]),t._v(" 目录操作")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令名")]),t._v(" "),a("th",[t._v("使用举例")]),t._v(" "),a("th",[t._v("功能描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("mkdir")])]),t._v(" "),a("td",[t._v("mkdir dirname")]),t._v(" "),a("td",[t._v("创建一个目录")])]),t._v(" "),a("tr",[a("td",[t._v("rmdir")]),t._v(" "),a("td",[t._v("rmdir dirname")]),t._v(" "),a("td",[t._v("删除一个目录")])]),t._v(" "),a("tr",[a("td",[t._v("mvdir")]),t._v(" "),a("td",[t._v("mvdir dir1 dir2")]),t._v(" "),a("td",[t._v("移动或重命名一个目录")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("cp")])]),t._v(" "),a("td",[t._v("cp -r sourcedir destdir")]),t._v(" "),a("td",[t._v("复制文件夹（-r递归）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("rm")])]),t._v(" "),a("td",[t._v("rm -rf dirname")]),t._v(" "),a("td",[t._v("删除文件或目录（-r递归 -f强制）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("cd")])]),t._v(" "),a("td",[t._v("cd dirname")]),t._v(" "),a("td",[t._v("改变当前目录")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("ls")])]),t._v(" "),a("td",[t._v("ls -la")]),t._v(" "),a("td",[t._v("显示当前目录的内容")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("pwd")])]),t._v(" "),a("td",[t._v("pwd")]),t._v(" "),a("td",[t._v("显示当前目录的路径名")])]),t._v(" "),a("tr",[a("td",[t._v("du")]),t._v(" "),a("td",[t._v("du -sh dirname")]),t._v(" "),a("td",[t._v("查看目录/文件占用空间大小")])])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# examples")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" -r "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/package1 ./packages/ "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拷贝package1文件夹到packages文件夹下")]),t._v("\n")])])]),a("h2",{attrs:{id:"文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件操作"}},[t._v("#")]),t._v(" 文件操作")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令名")]),t._v(" "),a("th",[t._v("使用举例")]),t._v(" "),a("th",[t._v("功能描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("cat")]),t._v(" "),a("td",[t._v("cat filename")]),t._v(" "),a("td",[t._v("显示文件")])]),t._v(" "),a("tr",[a("td",[t._v("echo")]),t._v(" "),a("td",[t._v("echo 'hello world' > ./testfile.txt")]),t._v(" "),a("td",[t._v("打印或新建文件")])]),t._v(" "),a("tr",[a("td",[t._v("touch")]),t._v(" "),a("td",[t._v("touch filename")]),t._v(" "),a("td",[t._v("新建文件")])]),t._v(" "),a("tr",[a("td",[t._v("mv")]),t._v(" "),a("td",[t._v("cat filename")]),t._v(" "),a("td",[t._v("显示或连接文件")])])])]),t._v(" "),a("h2",{attrs:{id:"其他shell命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他shell命令"}},[t._v("#")]),t._v(" 其他Shell命令")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令名")]),t._v(" "),a("th",[t._v("使用举例")]),t._v(" "),a("th",[t._v("功能描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("clear")]),t._v(" "),a("td",[t._v("clear")]),t._v(" "),a("td",[t._v("清除屏幕或窗口内容")])]),t._v(" "),a("tr",[a("td",[t._v("env")]),t._v(" "),a("td",[t._v("env")]),t._v(" "),a("td",[t._v("显示当前所有设置过的环境变量")])]),t._v(" "),a("tr",[a("td",[t._v("date")]),t._v(" "),a("td",[t._v("date")]),t._v(" "),a("td",[t._v("显示系统的当前日期和时间")])]),t._v(" "),a("tr",[a("td",[t._v("cal")]),t._v(" "),a("td",[t._v("cal")]),t._v(" "),a("td",[t._v("显示日历")])]),t._v(" "),a("tr",[a("td",[t._v("curl")]),t._v(" "),a("td",[t._v("curl [option] url")]),t._v(" "),a("td",[t._v("http命令行工具")])]),t._v(" "),a("tr",[a("td",[t._v("grep")]),t._v(" "),a("td",[t._v("grep 'keyword' file")]),t._v(" "),a("td",[t._v("过滤文本")])]),t._v(" "),a("tr",[a("td",[t._v("wc")]),t._v(" "),a("td",[t._v("wc [option] file")]),t._v(" "),a("td",[t._v("wordcount以及行数")])]),t._v(" "),a("tr",[a("td",[t._v("head/tail")]),t._v(" "),a("td",[t._v("head/tail file")]),t._v(" "),a("td",[t._v("查看前/后几行文本")])]),t._v(" "),a("tr",[a("td",[t._v("ps")]),t._v(" "),a("td",[t._v("ps -A")]),t._v(" "),a("td",[t._v("查看所有命令，可配合grep")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/6310131/69216024-18657380-0ba6-11ea-9b66-37972069568d.png",alt:"image"}})]),t._v(" "),a("blockquote",[a("p",[t._v('管道：Linux系统中的命令可以将标准输入读取数据，还能将这些数据送到标准输出中去，这种功能被系统进一步的利用，从而产生出一种新的特性，称之为管道符“|”，这个符号可以将一个命令的标准输出管道为另外一个命令的标准输入。比如：echo "hello world" | grep -i "HELLO"')])]),t._v(" "),a("blockquote",[a("p",[t._v("~/.zshrc:存放快捷配置；/etc/hosts: host配置；/usr/local/etc/nginx/(MACOS)/etc/nginx(Docker);")])]),t._v(" "),a("h2",{attrs:{id:"shell编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell编程"}},[t._v("#")]),t._v(" Shell编程")]),t._v(" "),a("h3",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run: sh depoly.sh 123 123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 变量定义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意赋值不需要空格")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("str2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this is '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$str")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 双引号可以直接写入变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("str3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this is '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${str}")]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("arr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 数组")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo打印")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" this is "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this is test # 被默认为字符串，不会报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test # 变量引用需要家$符号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$str2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this is test")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$str3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this is test")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 # 数组切割")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if判断")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if条件需要在方括号中，并且注意需要空格")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'successed'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'20'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$b")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a 不等于 b"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 123 #第一个参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 # 参数个数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 123 123 所有参数")]),t._v("\n")])])]),a("h3",{attrs:{id:"常用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用"}},[t._v("#")]),t._v(" 常用")]),t._v(" "),a("ul",[a("li",[t._v("$相关\n"),a("ul",[a("li",[t._v("${ } $var 与${var} 并没有啥不一样。但是用 ${ } 会比较精确的界定变量名称的范围")]),t._v(" "),a("li",[t._v("$()和 "),a("code"),t._v(" 都是用来做命令替换用")])])]),t._v(" "),a("li",[t._v("if 参数\n"),a("ul",[a("li",[t._v("[-z string] “string”的长度为零则为真。-n相反")]),t._v(" "),a("li",[t._v("-o(相当于||)\t或运算，有一个表达式为 true 则返回 true。")]),t._v(" "),a("li",[t._v("-a（相当于&&）与运算，两个表达式都为 true 才返回 true。")])])]),t._v(" "),a("li",[t._v("grep 文本搜索工具，常搭配cat命令")]),t._v(" "),a("li",[t._v("awk 文本分析工具")]),t._v(" "),a("li",[t._v("sed 在线编辑器")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("aaa")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("bbb")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$aaa")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${aaa}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1==1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -z "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status --porcelain"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Deploying gh-pages..."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Uncommitted git changes! Deploy failed."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("VERSION")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" package.json "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" version "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" -1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),t._v(" -F: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{ print "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$2")]),t._v(" }'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s/[\",]//g'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"实践案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实践案例"}},[t._v("#")]),t._v(" 实践案例")]),t._v(" "),a("h4",{attrs:{id:"_1-sed内容正则替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-sed内容正则替换"}},[t._v("#")]),t._v(" 1. sed内容正则替换")]),t._v(" "),a("p",[t._v("要求：把main.txt文件内容，所有“[data-v-*]”内容，替换为空字符串")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sed -i ''  's/\\[data-v-.*\\]//g' main.txt\n")])])]),a("p",[t._v("说明：")]),t._v(" "),a("ul",[a("li",[t._v("格式： "),a("code",[t._v("sed -i '' 's/oldValue/newValue/g' file.txt")])]),t._v(" "),a("li",[t._v("sed替换后面加 "),a("code",[t._v("-i ''")]),t._v("，因为不加的表示备份，加上则直接替换原文件。")])]),t._v(" "),a("h4",{attrs:{id:"_2-shell编程批量把markdown文件转为docx文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-shell编程批量把markdown文件转为docx文件"}},[t._v("#")]),t._v(" 2. shell编程批量把markdown文件转为docx文件")]),t._v(" "),a("p",[t._v("要求：对文件夹中的markdown文件，批量转换为同名的docx文件。")]),t._v(" "),a("p",[t._v("pandoc命令：该命令需要安装homebrew install pandoc")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('cd ./docs/vue1;\nfor file in ./*\\.md;\ndo\n    echo $file;\n    # 格式：${string//substring/replacement}  使用$replacement, 代替所有匹配的$substring\n    # filename=${file//\'.md\'/\'\'}; # 替换普通文字\n    # echo $filename;\n    \n    # 根据basename函数获取文件名\n    filename=$(basename $file);\n    echo $filename;\n    filenameNoSuffix=$(basename $file .md)\n    echo $filenameNoSuffix;\n    \n    # 执行命令\n    echo "pandoc -f markdown -t docx "$file" -o "$filenameNoSuffix".docx";\n    pandoc -f markdown -t docx "$file" -o "$filenameNoSuffix".docx\n    ## (cd "$dir" && echo \'111\');\ndone\n')])])]),a("h2",{attrs:{id:"vim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vim"}},[t._v("#")]),t._v(" Vim")]),t._v(" "),a("ol",[a("li",[t._v("编辑模式\n"),a("ol",[a("li",[a("code",[t._v("进入编辑模式")]),t._v(": 在默认模式下按 i/a/o\n"),a("ul",[a("li",[a("code",[t._v("i")]),t._v(" insert，光标到当前位置后。I,当前位置前")]),t._v(" "),a("li",[a("code",[t._v("a")]),t._v(" append，光标到末尾。A，到行首。")]),t._v(" "),a("li",[a("code",[t._v("o")]),t._v(" open a new line，光标在新行后。O，往上新行。")])])]),t._v(" "),a("li",[a("code",[t._v("编辑模式下输入")]),t._v("：\n"),a("ul",[a("li",[t._v("ctrl + h，删除字母")]),t._v(" "),a("li",[t._v("ctrl + w，删除单词")]),t._v(" "),a("li",[t._v("ctrl + u，删除整行")]),t._v(" "),a("li",[t._v("ctrl + a, 定位行首（仅terminal）")]),t._v(" "),a("li",[t._v("ctr + e，定位行尾（仅terminal）")]),t._v(" "),a("li",[t._v("ctrl + U：删除到行头（仅terminal）")]),t._v(" "),a("li",[t._v("ctrl + K：删除到行尾（仅terminal）")])])])])]),t._v(" "),a("li",[t._v("默认模式\n"),a("ol",[a("li",[a("code",[t._v("进入默认模式")]),t._v(": 在非指令模式下按 ESC/ctrl + c/ctrl + [")]),t._v(" "),a("li",[a("code",[t._v("默认模式下")]),t._v(" "),a("ol",[a("li",[t._v("移动\n"),a("ul",[a("li",[t._v("j 下")]),t._v(" "),a("li",[t._v("k 上")]),t._v(" "),a("li",[t._v("h 左")]),t._v(" "),a("li",[t._v("l 右")]),t._v(" "),a("li",[t._v("e/E end 移动到下一个单词尾")]),t._v(" "),a("li",[t._v("w/W 移动到下一个单词头")]),t._v(" "),a("li",[t._v("^ 移动到行首")]),t._v(" "),a("li",[t._v("$ 移动到行尾")])])]),t._v(" "),a("li",[t._v("删除\n"),a("ul",[a("li",[t._v("dd 删除一行")]),t._v(" "),a("li",[t._v("x 删除当前单词")])])])])])])]),t._v(" "),a("li",[t._v("选择模式： 输入v进行选择")]),t._v(" "),a("li",[t._v("指令模式\n"),a("ol",[a("li",[a("code",[t._v("进入指令模式")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(":w")]),t._v("保存当前文件")]),t._v(" "),a("li",[a("code",[t._v(":q")]),t._v(" 退出编辑,如果文件为保存需要用强制模式")]),t._v(" "),a("li",[a("code",[t._v(":q!")]),t._v("强制退出不保存修改")]),t._v(" "),a("li",[a("code",[t._v(":wq")]),t._v("组合指令, 保存并退出")]),t._v(" "),a("li",[a("code",[t._v("ZZ")]),t._v(" 保存并退出。ZZ不需要输入冒号并回车")])])])])])])])}),[],!1,null,null,null);s.default=v.exports}}]);