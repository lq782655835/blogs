(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{591:function(_,v,t){"use strict";t.r(v);var s=t(9),a=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"深度学习平台术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度学习平台术语"}},[_._v("#")]),_._v(" 深度学习平台术语")]),_._v(" "),t("p",[_._v("以下是开源深度学习平台kubeflow需要了解的相关术语。掌握它们，会更加理解搭建一个深度学习平台所需要的概念或框架。")]),_._v(" "),t("h2",{attrs:{id:"_1-rpc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-rpc"}},[_._v("#")]),_._v(" 1. RPC")]),_._v(" "),t("p",[_._v("提供远程调用对方的函数的框架。")]),_._v(" "),t("p",[_._v("远程过程调用带来的新问题：")]),_._v(" "),t("ol",[t("li",[_._v("Call ID映射。")]),_._v(" "),t("li",[_._v("序列化和反序列化。")]),_._v(" "),t("li",[_._v("网络传输")])]),_._v(" "),t("p",[_._v("https://www.zhihu.com/question/25536695")]),_._v(" "),t("h2",{attrs:{id:"_2-grpc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-grpc"}},[_._v("#")]),_._v(" 2. gRPC")]),_._v(" "),t("p",[_._v("google出的RPC框架，基于http2。可对外提供grpc服务。")]),_._v(" "),t("h2",{attrs:{id:"_3-微服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-微服务"}},[_._v("#")]),_._v(" 3. 微服务")]),_._v(" "),t("p",[t("code",[_._v("微服务")]),_._v("有两个核心：")]),_._v(" "),t("ul",[t("li",[_._v("微：服务的粒度要细，即服务要细化到API")]),_._v(" "),t("li",[_._v("服务：提供好服务，要让用户感到好用(要做到这一点很不容易)")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20170103145438903?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VpZmVuZzMwNTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),_._v(" "),t("p",[_._v("微服务特别简单（好的架构就应该简单），我们把服务再拆分成一个个API，API是一个完整的功能。然后我们把API扔到一个“云上”，然后用户就可以到“云上”获取所有API的服务，这个“云”保证能提供好的服务。")]),_._v(" "),t("p",[t("code",[_._v("微服务的关键是服务网关")]),_._v("，所以，上面提到的“云”就是服务网关。服务网关之下，就是内部系统之间的服务治理，这就是另外一个话题了。")]),_._v(" "),t("p",[_._v("实现方案:")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdn.net/20170103151255786?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VpZmVuZzMwNTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:""}})]),_._v(" "),t("p",[_._v("https://blog.csdn.net/suifeng3051/article/details/53992560")]),_._v(" "),t("blockquote",[t("p",[_._v("Docker 和Kubernetes 技术的流行, 为Pass资源的分配管理和服务的部署提供了新的解决方案, 但是微服务领域的其他服务治理问题仍然存在.")])]),_._v(" "),t("h2",{attrs:{id:"_4-服务治理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-服务治理"}},[_._v("#")]),_._v(" 4. 服务治理")]),_._v(" "),t("p",[_._v("服务化（常利用RPC框架实现）。但服务化还有挑战：")]),_._v(" "),t("ul",[t("li",[_._v("服务越来越多，配置管理复杂")]),_._v(" "),t("li",[_._v("服务间依赖关系复杂")]),_._v(" "),t("li",[_._v("服务之间的负载均衡")]),_._v(" "),t("li",[_._v("服务的拓展")]),_._v(" "),t("li",[_._v("服务监控")]),_._v(" "),t("li",[_._v("服务降级")]),_._v(" "),t("li",[_._v("服务鉴权")]),_._v(" "),t("li",[_._v("服务上线与下线")])]),_._v(" "),t("p",[_._v("所以服务治理是关键（dubbo就是一个带有服务治理功能的RPC框架）。服务治理理应具有：")]),_._v(" "),t("ul",[t("li",[_._v("服务注册, 服务发现")]),_._v(" "),t("li",[_._v("服务伸缩")]),_._v(" "),t("li",[_._v("健康检查")]),_._v(" "),t("li",[_._v("快速部署")]),_._v(" "),t("li",[_._v("服务容错: 断路器, 限流, 隔离舱, 熔断保护, 服务降级等等")]),_._v(" "),t("li",[_._v("认证和授权")]),_._v(" "),t("li",[_._v("灰度发布方案")]),_._v(" "),t("li",[_._v("服务调用可观测性, 指标收集")]),_._v(" "),t("li",[_._v("配置管理")])]),_._v(" "),t("blockquote",[t("p",[_._v("简单理解，大量的内部服务之间需要一个机制，去互相发现、流量管控等业务之外的问题，这个机制就是服务治理。Istio就是服务治理的框架实践（Service Mesh概念属于服务治理概念内，都在Istio中有实现）。")])]),_._v(" "),t("h2",{attrs:{id:"_5-istio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-istio"}},[_._v("#")]),_._v(" 5. Istio")]),_._v(" "),t("p",[_._v("简单理解，k8s负责把服务部署起来，Istio负责服务之间的管理（包括访问、限流、安全等）")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16db9347c2109b45?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),_._v(" "),t("h2",{attrs:{id:"_5-gpu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-gpu"}},[_._v("#")]),_._v(" 5. GPU")]),_._v(" "),t("p",[_._v("GPU是显卡的处理器，称为图形处理器（Graphics Processing Unit，即GPU），又称显示核心、视觉处理器、显示芯片，是一种专门在个人电脑、工作站、游戏机和一些移动设备（如平板电脑、智能手机等）上图像运算工作的微处理器，它是显卡的“心脏”，与CPU类似，只不过"),t("strong",[_._v("GPU是专为执行复杂的数学和几何计算而设计的")]),_._v("，这些计算是图形渲染所必需的。")]),_._v(" "),t("p",[_._v("CPU是“主（host）”而GPU是“从（device）”，GPU无论发展得多快，都只能是替CPU分担工作，而不是取代CPU。GPU是显卡上的一块芯片，就像CPU是主板上的一块芯片。")]),_._v(" "),t("h3",{attrs:{id:"gup与cpu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gup与cpu"}},[_._v("#")]),_._v(" GUP与CPU")]),_._v(" "),t("p",[_._v("CPU和GPU之所以大不相同，是由于其设计目标的不同，它们分别针对了两种不同的应用场景。CPU负责逻辑性强的事物处理和串行计算，GPU则专注于执行高度线程化的并行处理任务（大规模计算任务）。")]),_._v(" "),t("p",[_._v("CPU需要很强的通用性来处理各种不同的数据类型，同时逻辑判断又会引入大量的分支跳转和中断的处理，这些都使得CPU的内部结构异常复杂。")]),_._v(" "),t("p",[_._v("GPU面对的则是类型高度统一的、相互无依赖的大规模数据和不需要被打断的纯净的计算环境。")]),_._v(" "),t("p",[_._v("CPU擅长逻辑控制，串行的运算。和通用类型数据运算不同，GPU擅长的是大规模并发计算，这也正是密码破解等所需要的。所以GPU除了图像处理，也越来越多的参与到计算当中来。")]),_._v(" "),t("p",[_._v("总而言之，CPU和GPU因为最初用来处理的任务就不同，所以设计上有不小的区别。而某些任务和GPU最初用来解决的问题比较相似，所以用GPU来算了。GPU的工作大部分就是这样，计算量大，但没什么技术含量，而且要重复很多很多次。GPU的运算速度取决于雇了多少小学生，CPU的运算速度取决于请了多么厉害的教授。教授处理复杂任务的能力是碾压小学生的，但是对于没那么复杂，但是量特别大的任务，还是顶不住人多。当然现在的GPU也能做一些稍微复杂的工作了，相当于升级成初中生高中生的水平。但还需要CPU来把数据喂到嘴边才能开始干活，究竟还是靠CPU来管的。")])])}),[],!1,null,null,null);v.default=a.exports}}]);